/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.erhannis.theallforum;

import com.erhannis.theallforum.data.Handle;
import com.erhannis.theallforum.data.Signature;
import com.erhannis.theallforum.data.events.user.UserCreated;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.HashSet;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;

/**
 *
 * @author erhannis
 */
public class BaseMain {
  protected static KeyFile getKeyFile(Context ctx, String path) throws IOException, IllegalAccessException, InvalidKeyException, SignatureException, NoSuchAlgorithmException, ClassNotFoundException {
    File idFile = new File(path);
    if (idFile.exists()) {
      String currentHash = getHash();
      String hash = "UNKNOWN";
      try (FileInputStream fis = new FileInputStream(idFile); ObjectInputStream ois = new ObjectInputStream(fis)) {
        hash = ois.readUTF();
        return (KeyFile) ois.readObject();
      } catch (Exception e) {
        throw new RuntimeException("Error reading key file.  Server commit hash: " + currentHash + "  File commit hash: " + hash, e);
      }
    } else {
      if (idFile.createNewFile()) {
        try (FileOutputStream fos = new FileOutputStream(idFile); ObjectOutputStream oos = new ObjectOutputStream(fos)) {
          KeyPairGenerator kpg = KeyPairGenerator.getInstance(Constants.KEY_ALGORITHM);
          kpg.initialize(Constants.KEY_BITS);
          KeyPair keyPair = kpg.genKeyPair();

          UserCreated uc = new UserCreated();
          uc.handle = Handle.gen(keyPair.getPublic());
          uc.username = null;
          uc.avatarUrl = null;
          uc.description = "AUTOGENERATED SERVER USER";
          uc.email = null;
          uc.parents = new HashSet<Handle>();
          uc.privateKeyEncrypted = null;
          uc.publicKey = keyPair.getPublic();
          uc.user = uc.handle;
          uc.userTimestamp = System.currentTimeMillis();
          uc.userSignature = Signature.signUser(ctx, uc, keyPair.getPrivate());
          uc.server = uc.handle;
          uc.serverTimestamp = uc.userTimestamp;
          uc.serverSignature = Signature.signServer(ctx, uc, keyPair.getPrivate());
          
          EntityManager em = ctx.factory.createEntityManager();
          em.getTransaction().begin();
          em.persist(uc);
          em.getTransaction().commit();
          em.close();

          KeyFile kf = new KeyFile(uc.handle, keyPair.getPrivate());
          oos.writeUTF(getHash());
          oos.writeObject(kf);
          oos.flush();
          return kf;
        }
      } else {
        throw new IOException("Can't create id file");
      }
    }
  }

  public static String getHash() {
    try {
      String className = BaseMain.class.getSimpleName() + ".class";
      String classPath = BaseMain.class.getResource(className).toString();
      if (!classPath.startsWith("jar")) {
        return "unknown";
      }
      String manifestPath = classPath.substring(0, classPath.lastIndexOf("!") + 1) + "/META-INF/MANIFEST.MF";
      Manifest manifest = new Manifest(new URL(manifestPath).openStream());
      Attributes attr = manifest.getMainAttributes();
      return attr.getValue("git-hash");
    } catch (IOException e) {
      Logger.getLogger(BaseMain.class.getName()).log(Level.SEVERE, null, e);
      return "unknown";
    }
  }
}
